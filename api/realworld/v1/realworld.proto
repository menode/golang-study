syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "kratos-test/api/realworld/v1;v1";


// The greeting service definition.
service Realworld {
  // Sends a greeting
  rpc Login(LoginReq) returns (UserReply) {
    option (google.api.http) = {
      post: "/api/users/login"
      body: "*"
    };
  }
  rpc Register(RegisterReq) returns (RegisterResp) {
    option (google.api.http) = {
      post: "/api/users"
      body: "*"
    };
  }
  rpc CurrentUser(Empty) returns (UserReply) {
    option (google.api.http) = {
      get: "/api/user"
    };
  }
  rpc UpdateUser(UserReq) returns (UserReply) {
    option (google.api.http) = {
      put: "/api/user"
      body: "*"
    };
  }

  rpc GetProfile(GetProfileReq) returns (ProfileReply) {
    option (google.api.http) = {
      get: "/api/profiles/{username}"
    };
  }

  rpc FollowProfile(GetProfileReq) returns (ProfileReply) {
    option (google.api.http) = {
      post: "/api/profiles/{username}/follow"
      body: "*"
    };
  }

  rpc UnfollowProfile(GetProfileReq) returns (ProfileReply) {
    option (google.api.http) = {
      delete: "/api/profiles/{username}/follow"
    };
  }

  rpc GetArticle(GetArticleReq) returns (ArticleReply) {
    option (google.api.http) = {
      get: "/api/articles/{slug}"
    };
  }

  rpc GetArticles(ListArticles) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles"
    };
  }

  rpc FeedArticles(FeedArticlesRequest) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles/feed"
    };
  }

  rpc CreateArticle(CreateArticleReq) returns (ArticleReply) {
    option (google.api.http) = {
      post: "/api/articles"
      body: "*"
    };
  }

  rpc UpdateArticle(UpdateArticleReq) returns (ArticleReply) {
    option (google.api.http) = {
      put: "/api/articles/{slug}"
      body: "*"
    };
  }

  rpc DeleteArticle(DeleteArticleReq) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}"
    };
  }

  rpc AddComment(AddCommentReq) returns (CommentReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/comments"
      body: "*"
    };
  }

  rpc GetComments(GetCommentsReq) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles/{slug}/comments"
    };
  }

  rpc DeleteComment(DeleteCommentReq) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/comments/{id}"
    };
  }

  rpc FavoriteArticle(FavoriteArticleReq) returns (ArticleReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/favorite"
      body: "*"
    };
  }

  rpc UnfavoriteArticle(FavoriteArticleReq) returns (ArticleReply) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/favorite"
    };
  }
 
  rpc GetTags(Empty) returns (TagsReply) {
    option (google.api.http) = {
      get: "/api/tags"
    };
  }
}

message FavoriteArticleReq {
    string slug = 1;
}

message DeleteCommentReq {
    string slug = 1;
    uint32 id = 2;
}
message GetCommentsReq {
    string slug = 1;
}
message DeleteArticleReq {
    string slug = 1;
}
message ListArticles {
    uint32 limit = 1;
    uint32 offset = 2;
    string tag = 3;
    string author = 4;
    string favorited = 5;
}
message FeedArticlesRequest {
    uint32 limit = 1;
    uint32 offset = 2;
}
message AddCommentReq {
    message Comment {
        string body = 1;
    }
    Comment comment = 1;
    string slug = 2;
  }
  
message UpdateArticleReq {
    message Article {
        string title = 1;
        string description = 2;
        string body = 3;
        repeated string tag_list = 4;
    }
    Article article = 1;
    string slug = 2;    
  }
message CreateArticleReq {
    message Article {
        string title = 1;
        string description = 2;
        string body = 3;
        repeated string tag_list = 4;
    }
    Article article = 1;
  }


message GetArticleReq {
    string slug = 1;
}
message GetProfileReq {
    string username = 1;
}
message UserReq {
    message User {
        string email = 1;
        string username = 2;
        string password = 3;
        string image = 4;
        string bio = 5;
    }
    User user = 1;
  }
message Empty {}
message UserReply {

    message User {
        string email = 1;
        string token = 2;
        string username = 3;
        string bio = 4;
        string image = 5;
    }

    User user = 1;
}

message ProfileReply {

    message Profile {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    Profile profile = 1;
}

message ArticleReply {

  message Author {
      string username = 1;
      string bio = 2;
      string image = 3;
      bool following = 4;
  }

  message Article {
      string slug = 1;
      string title = 2;
      string description = 3;
      string body = 4;
      repeated string tag_list = 5;
      google.protobuf.Timestamp created_at = 6;
      google.protobuf.Timestamp updated_at = 7;
      bool favorited = 8;
      uint32 favorites_count = 9;
      Author author = 10;
  }
  Article article = 1;
}
message MultipleArticlesReply{

  message Author {
      string username = 1;
      string bio = 2;
      string image = 3;
      bool following = 4;
  }

  message Articles {
      string slug = 1;
      string title = 2;
      string description = 3;
      string body = 4;
      repeated string tag_list = 5;
      google.protobuf.Timestamp created_at = 6;
      google.protobuf.Timestamp updated_at = 7;
      bool favorited = 8;
      uint32 favorites_count = 9;
      Author author = 10;
  }

  repeated Articles articles = 1;
  uint32 articles_count = 2;
}



  message CommentReply {

    message Author {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    message Comment {
        uint32 id = 1;
        google.protobuf.Timestamp created_at = 2;
        google.protobuf.Timestamp updated_at = 3;
        string body = 4;
        Author author = 5;
    }

    Comment comment = 1;
}

message CommentsReply {

    message Author {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    message Comments {
        uint32 id = 1;
        google.protobuf.Timestamp created_at = 2;
        google.protobuf.Timestamp updated_at = 3;
        string body = 4;
        Author author = 5;
    }

    repeated Comments comments = 1;
}



message TagsReply {
    repeated string tags = 1;
}

message LoginReq {
  message User {
    string email = 1;
    string password = 2;
  }
  User user = 1;
  
}

message LoginResp {
  string token = 1;
}

message RegisterReq {
  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}
message RegisterResp {
  message User {
     string email = 1;
      string token = 2;
      string username = 3;
      string bio = 4;
      string image = 5;
  }
  User user = 1;
 
}